generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "mongodb"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECTED_DATABASE_URL")
}

model User {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    email         String        @unique
    emailVerified DateTime?
    image         String?
    sessions      Session[]
    accounts      Account[]
    files         File[]
    chatMessages  ChatMessage[]
    chatSessions  ChatSession[]

    @@map("users")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    user         User     @relation(fields: [userId], references: [id])
    expires      DateTime

    @@map("sessions")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model File {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    fileName    String   @unique
    fileUrl     String   @unique
    checksum    String
    secureToken String   @unique
    isProcessed Boolean  @default(false)
    createdAt   DateTime @default(now()) @map("createdAt")
    updatedAt   DateTime @updatedAt @map("updatedAt")
    userId      String   @db.ObjectId
    user        User     @relation(fields: [userId], references: [id])

    @@map("files")
}

model ChatMessage {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    content       String
    role          String
    sessionId     String
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    User          User?        @relation(fields: [userId], references: [id])
    userId        String?      @db.ObjectId
    ChatSession   ChatSession? @relation(fields: [chatSessionId], references: [id])
    chatSessionId String?      @db.ObjectId

    @@map("chatmessages")
}

model ChatSession {
    id        String        @id @default(auto()) @map("_id") @db.ObjectId
    userId    String        @db.ObjectId
    title     String
    messages  ChatMessage[]
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    user      User          @relation(fields: [userId], references: [id])
}
